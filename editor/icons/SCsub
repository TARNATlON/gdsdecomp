#!/usr/bin/env python

Import('env')
Import('env_gdsdecomp')
from compat import StringIO

def make_gdre_icons_action(target, source, env):

    import os

    dst = target[0].srcnode().abspath
    pixmaps = source

    s = StringIO()

    s.write("#include \"gdre_icons.h\"\n\n")
    s.write("#ifdef TOOLS_ENABLED\n\n")
    s.write("#include \"editor_scale.h\"\n\n")
    s.write("#endif\n\n")
    s.write("#include \"scene/resources/theme.h\"\n\n")

    hidpi_list = []

    for x in pixmaps:

        x = str(x)
        var_str = os.path.basename(x)[:-4] + "_png"
        # print(var_str)

        s.write("static const unsigned char " + var_str + "[]={\n")

        pngf = open(x, "rb")

        b = pngf.read(1)
        while(len(b) == 1):
            s.write(hex(ord(b)))
            b = pngf.read(1)
            if (len(b) == 1):
                s.write(",")

        s.write("\n};\n\n")

        pngf.close()
        var_str = os.path.basename(x)[:-4] + "_hidpi_png"
        try:

            pngf = open(os.path.dirname(x) + "/2x/" + os.path.basename(x), "rb")

            s.write("static const unsigned char " + var_str + "[]={\n")

            b = pngf.read(1)
            while(len(b) == 1):
                s.write(hex(ord(b)))
                b = pngf.read(1)
                if (len(b) == 1):
                    s.write(",")

            s.write("\n};\n\n\n")
            hidpi_list.append(x)

        except:
            s.write("static const unsigned char* " + var_str + "=NULL;\n\n\n")

    s.write("static bool check_hidpi(){\n")

    s.write("#ifdef TOOLS_ENABLED\n")
    s.write("\treturn editor_is_hidpi();\n")
    s.write("#else\n")
    s.write("\treturn false;\n")
    s.write("#endif\n")
    s.write("}\n\n")

    s.write("static Ref<ImageTexture> make_icon(const uint8_t* p_png,const uint8_t* p_hidpi_png) {\n")
    s.write("\tRef<ImageTexture> texture( memnew( ImageTexture ) );\n")
    s.write("\tImage img((check_hidpi()&&p_hidpi_png)?p_hidpi_png:p_png);\n")
    s.write("\tif (check_hidpi() && !p_hidpi_png) { img.convert(Image::FORMAT_RGBA); img.expand_x2_hq2x(); }\n")
    s.write("\ttexture->create_from_image( img,ImageTexture::FLAG_FILTER );\n")
    s.write("\treturn texture;\n")
    s.write("}\n\n")

    s.write("Map<String, Ref<ImageTexture>> get_gdre_icons() {\n\n")
    s.write("\tMap<String, Ref<ImageTexture>> gdre_icons;")

    for x in pixmaps:

        x = os.path.basename(str(x))
        type = x[5:-4].title().replace("_", "")
        var_str = x[:-4] + "_png"
        var_str_hidpi = x[:-4] + "_hidpi_png"
        s.write("\tgdre_icons.insert(\"" + type + "\",make_icon(" + var_str + "," + var_str_hidpi + "));\n")
    s.write("\treturn gdre_icons;")
    s.write("\n\n}\n\n")

    f = open(dst, "w")
    f.write(s.getvalue())
    f.close()
    s.close()

make_gdre_icons_builder = Builder(action=make_gdre_icons_action,
                                    suffix='.cpp',
                                    src_suffix='.png')
env_gdsdecomp['BUILDERS']['MakeGdreIconsBuilder'] = make_gdre_icons_builder
env_gdsdecomp.Alias('gdre_icons', [env_gdsdecomp.MakeGdreIconsBuilder('#modules/gdsdecomp/editor/gdre_icons.gen.cpp', Glob("*.png"))])
env_gdsdecomp.add_source_files(env.modules_sources, "modules/gdsdecomp/editor/gdre_icons.gen.cpp")
#env.modules_sources.append("#modules/gdsdecomp/editor/gdre_icons.gen.cpp")

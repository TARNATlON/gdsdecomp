# This periodically checks to see if we've drifted out of sync with master by running a compile from the latest,
# with only the gdsdecomp module enabled.

name: Check sync with Godot master API

# runs every 6 hours
on:
  schedule:
    - cron: '0 */6 * * *'
  
  workflow_dispatch:
env:
  GODOT_BASE_BRANCH: master
  GDSDECOMP_BASE_BRANCH: master
  SCONSFLAGS: -j2 platform=linuxbsd warnings=extra bits=64 disable_3d=yes debug_symbols=no module_hdr_enabled=no module_bmp_enabled=no module_bullet_enabled=no module_jpg_enabled=no module_squish_enabled=no module_csg_enabled=no module_cvtt_enabled=no module_mbedtls_enabled=no module_dds_enabled=no module_tga_enabled=no module_enet_enabled=no module_thekla_unwrap_enabled=no module_etc_enabled=no module_mobile_vr_enabled=no module_upnp_enabled=no module_gdnative_enabled=no module_opensimplex_enabled=no module_opus_enabled=no module_pvr_enabled=no module_webm_enabled=no module_recast_enabled=no module_websocket_enabled=no module_gridmap_enabled=no module_xatlas_unwrap_enabled=no use_static_cpp=yes builtin_freetype=yes builtin_libpng=yes builtin_zlib=yes
jobs:
  check:
    name: "Release, no modules"
    steps:
      - name: checkout-godot
        uses: actions/checkout@v2
        with:
          repository: godotengine/godot
          # check out latest from master branch
          ref: ${{env.GODOT_BASE_BRANCH}}

      - name: checkout-gdsdecomp
        uses: actions/checkout@v2
        with:
          path: modules/gdsdecomp
          ref: ${{env.GDSDECOMP_BASE_BRANCH}}

      # Azure repositories are not reliable, we need to prevent azure giving us packages.
      - name: Make apt sources.list use the default Ubuntu repositories
        run: |
          sudo rm -f /etc/apt/sources.list.d/*
          sudo cp -f misc/ci/sources.list /etc/apt/sources.list
          sudo apt-get update

      # Install all packages (except scons)
      - name: Configure dependencies
        run: |
          sudo apt-get install build-essential pkg-config libx11-dev libxcursor-dev \
            libxinerama-dev libgl1-mesa-dev libglu-dev libasound2-dev libpulse-dev \
            libudev-dev libxi-dev libxrandr-dev yasm clang-format-8

      # Upload cache on completion and check it out now
      - name: Load .scons_cache directory
        id: linux-editor-cache
        uses: actions/cache@v2
        with:
          path: ${{github.workspace}}/.scons_cache/
          key: ${{github.job}}-${{env.GODOT_BASE_BRANCH}}-${{github.ref}}-${{github.sha}}
          restore-keys: |
            ${{github.job}}-${{env.GODOT_BASE_BRANCH}}-${{github.ref}}-${{github.sha}}
            ${{github.job}}-${{env.GODOT_BASE_BRANCH}}-${{github.ref}}
            ${{github.job}}-${{env.GODOT_BASE_BRANCH}}

      # Use python 3.x release (works cross platform; best to keep self contained in it's own step)
      - name: Set up Python 3.x
        uses: actions/setup-python@v2
        with:
          # Semantic version range syntax or exact version of a Python version
          python-version: '3.x'
          # Optional - x64 or x86 architecture, defaults to x64
          architecture: 'x64'

      # Setup scons, print python version and scons version info, so if anything is broken it won't run the build.
      - name: Configuring Python packages
        run: |
          python -c "import sys; print(sys.version)"
          python -m pip install scons
          python --version
          scons --version

      # We should always be explicit with our flags usage here since it's gonna be sure to always set those flags
      - name: Compilation
        env:
          SCONS_CACHE: ${{github.workspace}}/.scons_cache/
        run: |
          scons tools=yes tests=no target=release
          ls -l bin/
